# Don't send Nginx version number in error pages and server header
server_tokens off;

# Disable iframe
add_header X-Frame-Options SAMEORIGIN;

# Disable Content-Type sniffing
add_header X-Content-Type-Options nosniff;

# XSS filter re-enabled
add_header X-XSS-Protection "1; mode=block";

upstream {upstream} {
    server              unix:/tmp/{domain}.sock;
}

server {
    listen              443 ssl;

    ssl_certificate     {ssl_path}/{domain}.crt;
    ssl_certificate_key {ssl_path}/{domain}.key;
    ssl_session_timeout 5m;
    ssl_session_cache   shared:SSL:50m;

    ssl_dhparam         {ssl_path}/dhparam.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    resolver            8.8.8.8;
    ssl_stapling        on;
    ssl_trusted_certificate {ssl_path}/{domain}.pem;

    server_name         {domain};
    charset             utf-8;
    root                {path};

    client_max_body_size 5M;

    location {static_url} {
        alias           {path}{static_relative};
        access_log      off;
        expires         30d;
    }

    location / {
        uwsgi_pass      {upstream};
        include         uwsgi_params;
    }
}

# Redirect HTTP to HTTPS
server {
    listen          80;
    server_name     {domain};
    return 301      https://$host$request_uri;
}
