# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-12-01 00:46
from __future__ import unicode_literals

from django.conf import settings
from django.db import connection, migrations, models

# For reverting the migration, should the more speedy collation 'utf8mb4_general_ci' be used
# or the slower, but 'utf8 compatible' 'utf8mb4_unicode_ci' be used?
# True: utf8mb4_general_ci
# False: utf8mb4_unicode_ci
reverse_performance = False
database_query_template = 'ALTER DATABASE {database_name} CHARACTER SET = {encoding} COLLATE = {collation};'
table_query_template = 'ALTER TABLE {table_name} CONVERT TO CHARACTER SET {encoding} COLLATE {collation};'
repair_table_query_template = 'REPAIR TABLE {table_name};'
optimize_table_query_template = 'OPTIMIZE TABLE {table_name};'
column_query_template = 'ALTER TABLE {table_name} CHANGE {column_name} {column_name} {column_type} CHARACTER SET {encoding} COLLATE {collation};'

encoding_kwargs_forward = {
    'encoding': 'utf8mb4',
    'collation': 'utf8mb4_unicode_ci'
}
encoding_kwargs_reverse = {
    'encoding': 'utf8',
    'collation': 'utf8_general_ci' if reverse_performance else 'utf8_unicode_ci'
}


def create_queries(apps, schema_editor, forward):
    queries = []

    def append_query(template, encoding_kwargs=None, forward_kwargs={}, reverse_kwargs={}, **kwargs):
        if forward:
            if encoding_kwargs is None:
                encoding_kwargs = encoding_kwargs_forward
            queries.append(
                template.format(
                    **encoding_kwargs,
                    **forward_kwargs,
                    **kwargs
                )
            )
        else:
            if encoding_kwargs is None:
                encoding_kwargs = encoding_kwargs_reverse
            queries.append(
                template.format(
                    **encoding_kwargs,
                    **reverse_kwargs,
                    **kwargs
                )
            )

    # Add database query
    append_query(
        database_query_template,
        database_name=settings.DB_NAME
    )

    # Add table queries
    app_names = [
        'lunch',
        'business',
        'customers',
        'django_sms',
        'django_gocardless',
        'frontend',
    ]
    table_names = connection.introspection.table_names()
    append_query(
        table_query_template,
        table_name='django_admin_log'
    )

    for table_name in table_names:
        for app_name in app_names:
            if table_name.startswith(app_name):
                append_query(
                    table_query_template,
                    table_name=table_name
                )

    # Add column queries
    for app_name in app_names:
        config = apps.get_app_config(app_name)

        for model in config.get_models():
            for field in model._meta.get_fields():
                if isinstance(field, (models.EmailField, models.URLField)):
                    append_query(
                        column_query_template,
                        table_name=model._meta.db_table,
                        column_name=field.name,
                        encoding_kwargs={
                            'encoding': encoding_kwargs_reverse['encoding'],
                            'collation': encoding_kwargs_reverse['collation']
                        },
                        forward_kwargs={
                            'column_type': 'VARCHAR({max_length})'.format(
                                max_length=field.max_length
                            )
                        },
                        reverse_kwargs={
                            'column_type': 'VARCHAR({max_length})'.format(
                                max_length=field.max_length
                            )
                        }
                    )
                elif isinstance(field, models.CharField):
                    if field.max_length > 191:
                        raise ValueError(
                            'The field {field_name} has a max_length of '
                            '{max_length}, change it to 191 or lower.'.format(
                                field_name=field.name,
                                max_length=field.max_length
                            )
                        )
                elif isinstance(field, models.TextField):
                    append_query(
                        column_query_template,
                        table_name=model._meta.db_table,
                        column_name=field.name,
                        column_type='LONGTEXT'
                    )

    for table_name in table_names:
        append_query(
            repair_table_query_template,
            table_name=table_name
        )
        append_query(
            optimize_table_query_template,
            table_name=table_name
        )

    return queries


def utf8mb4_migration(apps, schema_editor, forward):
    queries = create_queries(apps, schema_editor, forward=forward)
    try:
        schema_editor.execute('SET foreign_key_checks = 0;')
        for query in queries:
            print('query', query)
            schema_editor.execute(query)
    except:
        schema_editor.execute('SET foreign_key_checks = 1;')
        raise


def utf8mb4_migration_forward(apps, schema_editor):
    return utf8mb4_migration(apps, schema_editor, forward=True)


def utf8mb4_migration_reverse(apps, schema_editor):
    return utf8mb4_migration(apps, schema_editor, forward=False)


class Migration(migrations.Migration):

    dependencies = [
        ('business', '0011_utf8mb4'),
        ('frontend', '0002_utf8mb4'),
        ('lunch', '0015_utf8mb4'),
        ('customers', '0018_utf8mb4'),
        ('django_gocardless', '0004_utf8mb4'),
    ]

    operations = [
        migrations.RunPython(utf8mb4_migration_forward, utf8mb4_migration_reverse)
    ]
