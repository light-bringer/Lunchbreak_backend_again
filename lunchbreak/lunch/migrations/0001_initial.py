# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2017-06-22 15:39
from __future__ import unicode_literals

import Lunchbreak.fields
import Lunchbreak.mixins
import datetime
import dirtyfields.dirtyfields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import private_media.storages


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeliveryPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'Maandag'), (2, 'Dinsdag'), (3, 'Woensdag'), (4, 'Donderdag'), (5, 'Vrijdag'), (6, 'Zaterdag'), (7, 'Zondag')], help_text='Dag van de week.', verbose_name='weekdag')),
                ('time', models.TimeField(help_text='Tijdstip waarop de winkel opengaat.', verbose_name='openingstijd')),
                ('duration', models.DurationField(help_text='Hoelang de winkel open is vanaf de openingstijd.', verbose_name='openingsduur')),
            ],
            options={
                'verbose_name': 'leveringstijd',
                'verbose_name_plural': 'leveringstijden',
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('description', models.TextField(blank=True, help_text='Beschrijving.', verbose_name='beschrijving')),
                ('amount', Lunchbreak.fields.RoundingDecimalField(decimal_places=3, default=1, help_text='Hoeveelheid die standaard is ingevuld.', max_digits=7, verbose_name='standaardhoeveelheid')),
                ('cost', Lunchbreak.fields.CostField(help_text='Basisprijs, dit is inclusief de gekozen ingrediënten en ingrediëntengroepen.', verbose_name='basisprijs')),
                ('preorder_days', models.IntegerField(default=0, help_text='Minimum dagen op voorhand bestellen voor het uur ingesteld op de winkel. (0 is uitgeschakeld, >=1 is dezelfde dag voor het bepaalde uur.)', verbose_name='dagen op voorhand bestellen')),
                ('commentable', models.BooleanField(default=False, help_text='Of er commentaar kan achter worden gelaten bij het bestellen.', verbose_name='commentaar mogelijk')),
                ('priority', models.BigIntegerField(default=0, help_text='Prioriteit.', verbose_name='prioriteit')),
                ('enabled', models.BooleanField(default=True, help_text='Ingeschakeld.', verbose_name='ingeschakeld')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Laatst aangepast.', verbose_name='laatst aangepast')),
            ],
            options={
                'verbose_name': 'etenswaar',
                'verbose_name_plural': 'etenswaren',
            },
            bases=(Lunchbreak.mixins.CleanModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FoodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('quantifier', models.CharField(blank=True, help_text='Naam van de eenheid van eten, vb: "broodjes", "broden"...', max_length=191, null=True, verbose_name='eenheid')),
                ('inputtype', models.PositiveIntegerField(choices=[(0, 'Aantal'), (1, 'Aanpasbaar o.b.v. SI-eenheid'), (2, 'Vaste hoeveelheid o.b.v. SI-eenheid')], default=0, help_text='Invoer type die aanduid hoe de hoeveelheid ingegeven moet en kan worden.', verbose_name='invoer type')),
                ('customisable', models.BooleanField(default=False, help_text='Of dit type etenswaar aanpasbaar kan zijn.', verbose_name='aanpasbaar')),
            ],
            options={
                'verbose_name': 'type etenswaar',
                'verbose_name_plural': 'type etenswaren',
            },
        ),
        migrations.CreateModel(
            name='HolidayPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Beschrijving met een reden.', max_length=191, verbose_name='beschrijving')),
                ('start', models.DateTimeField(help_text='Start van de vakantieperiode.', verbose_name='start')),
                ('end', models.DateTimeField(help_text='Einde van de vakantieperiode.', verbose_name='einde')),
                ('closed', models.BooleanField(default=True, help_text='Of de winkel gesloten is tijdens deze vakantieperiode.', verbose_name='gesloten')),
            ],
            options={
                'verbose_name': 'vakantieperiode',
                'verbose_name_plural': 'vakantieperiodes',
            },
            bases=(Lunchbreak.mixins.CleanModelMixin, models.Model, dirtyfields.dirtyfields.DirtyFieldsMixin),
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('cost', Lunchbreak.fields.CostField(default=0, help_text='Basisprijs diet in rekening wordt gebracht afhankelijk van de prijsberekening ingesteld op de ingrediëntengroep.', verbose_name='basisprijs')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Laatst aangepast.', verbose_name='laatst aangepast')),
            ],
            options={
                'verbose_name': 'ingrediënt',
                'verbose_name_plural': 'ingrediënten',
            },
            bases=(models.Model, dirtyfields.dirtyfields.DirtyFieldsMixin),
        ),
        migrations.CreateModel(
            name='IngredientGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('minimum', models.PositiveIntegerField(default=0, help_text='Minimum hoeveelheid.', verbose_name='minimum')),
                ('maximum', models.PositiveIntegerField(default=0, help_text='Maximum hoeveelheid.', verbose_name='maximum')),
                ('priority', models.PositiveIntegerField(default=0, help_text='Prioriteit waarop gesorteerd wordt.', verbose_name='prioriteit')),
                ('cost', Lunchbreak.fields.CostField(default=0, help_text='Basisprijs indien toegevoegd of afgetrokken van het etenswaar.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='basisprijs')),
                ('calculation', models.PositiveIntegerField(choices=[(0, 'Altijd de groepsprijs'), (1, 'Duurder bij toevoegen, zelfde bij aftrekken'), (2, 'Duurder bij toevoegen, goedkoper bij aftrekken')], default=2, help_text='Manier waarop de prijs moet berekened worden indien ingrediënten aangepast toegevoegd of afgetrokken worden.', verbose_name='prijsberekening')),
                ('foodtype', models.ForeignKey(help_text='Type etenswaar.', on_delete=django.db.models.deletion.CASCADE, to='lunch.FoodType', verbose_name='type etenswaar')),
            ],
            options={
                'verbose_name': 'ingrediëntengroep',
                'verbose_name_plural': 'ingrediëntengroepen',
            },
            bases=(Lunchbreak.mixins.CleanModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IngredientRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected', models.BooleanField(default=False, help_text='Of het ingrediënt standaard geselecteerd is.', verbose_name='geselecteerd')),
                ('typical', models.BooleanField(default=False, help_text='Of het een typisch ingrediënt is voor het gelinkte etenswaar.', verbose_name='typisch')),
                ('food', models.ForeignKey(help_text='Etenswaar.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredientrelations', to='lunch.Food', verbose_name='etenswaar')),
                ('ingredient', models.ForeignKey(help_text='Ingrediënt.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredientrelations', to='lunch.Ingredient', verbose_name='ingrediënt')),
            ],
            bases=(models.Model, dirtyfields.dirtyfields.DirtyFieldsMixin),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('priority', models.PositiveIntegerField(default=0, help_text='Prioriteit.', verbose_name='prioriteit')),
            ],
            options={
                'verbose_name': 'menu',
                'verbose_name_plural': "menu's",
            },
        ),
        migrations.CreateModel(
            name='OpeningPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'Maandag'), (2, 'Dinsdag'), (3, 'Woensdag'), (4, 'Donderdag'), (5, 'Vrijdag'), (6, 'Zaterdag'), (7, 'Zondag')], help_text='Dag van de week.', verbose_name='weekdag')),
                ('time', models.TimeField(help_text='Tijdstip waarop de winkel opengaat.', verbose_name='openingstijd')),
                ('duration', models.DurationField(help_text='Hoelang de winkel open is vanaf de openingstijd.', verbose_name='openingsduur')),
            ],
            options={
                'verbose_name': 'openingstijd',
                'verbose_name_plural': 'openingstijden',
            },
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('minimum', Lunchbreak.fields.RoundingDecimalField(decimal_places=3, default=1, help_text='Minimum hoeveelheid.', max_digits=7, verbose_name='minimum')),
                ('maximum', Lunchbreak.fields.RoundingDecimalField(decimal_places=3, default=10, help_text='Maximum hoeveelheid.', max_digits=7, verbose_name='maximum')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Laatst aangepast.', verbose_name='laatst aangepast')),
                ('foodtype', models.ForeignKey(help_text='Type etenswaar.', on_delete=django.db.models.deletion.CASCADE, to='lunch.FoodType', verbose_name='type etenswaar')),
            ],
            options={
                'verbose_name': 'hoeveelheid',
                'verbose_name_plural': 'hoeveelheden',
            },
            bases=(Lunchbreak.mixins.CleanModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('country', models.PositiveSmallIntegerField(choices=[(0, 'België'), (1, 'Nederland'), (2, 'Luxemburg'), (3, 'Frankrijk'), (4, 'Duitsland')], help_text='Land.', verbose_name='land')),
                ('postcode', models.CharField(help_text='Postcode.', max_length=191, verbose_name='postcode')),
            ],
            options={
                'verbose_name': 'regio',
                'verbose_name_plural': "regio's",
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(help_text='Land.', max_length=191, verbose_name='land')),
                ('province', models.CharField(help_text='Provincie.', max_length=191, verbose_name='provincie')),
                ('city', models.CharField(help_text='Stad.', max_length=191, verbose_name='stad')),
                ('postcode', models.CharField(help_text='Postcode.', max_length=20, verbose_name='postcode')),
                ('street', models.CharField(help_text='Straat.', max_length=191, verbose_name='straat')),
                ('number', models.CharField(help_text='Straatnummer.', max_length=10, verbose_name='straatnummer')),
                ('latitude', Lunchbreak.fields.RoundingDecimalField(decimal_places=7, help_text='Breedtegraad.', max_digits=10, verbose_name='breedtegraad')),
                ('longitude', Lunchbreak.fields.RoundingDecimalField(decimal_places=7, help_text='Lengtegraad.', max_digits=10, verbose_name='lengtegraad')),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
                ('wait', models.DurationField(default=datetime.timedelta(0, 60), help_text='Minimum tijd dat op voorhand besteld moet worden.', verbose_name='wachttijd')),
                ('preorder_time', models.TimeField(default=datetime.time(12, 0), help_text='Indien bepaalde waren meer dan een dag op voorhand besteld moeten worden, moeten ze voor dit tijdstip besteld worden.', verbose_name='tijd voorafgaande bestelling')),
                ('seats_max', models.PositiveIntegerField(default=10, help_text='Maximum aantal plaatsen voor reservaties.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='maximum plaatsen')),
                ('timezone', models.CharField(default='UTC', help_text='Tijdzone.', max_length=191, verbose_name='tijdzone')),
                ('gocardless_enabled', models.BooleanField(default=False, help_text='Online betalingen ingeschakeld, er moet een GoCardless merchant gelinkt worden voor online betalingen aanvaard kunnen worden.', verbose_name='gocardless betalingen ingeschakeld')),
                ('payconiq_enabled', models.BooleanField(default=False, help_text='Online betalingen ingeschakeld, er moet een Payconiq merchant gelinkt worden voor online betalingen aanvaard kunnen worden.', verbose_name='payconiq betalingen ingeschakeld')),
                ('cash_enabled', models.BooleanField(default=True, help_text='Betalingen in winkel ingeschakeld.', verbose_name='betalingen in winkel ingeschakeld')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='Wanneer deze winkel laatst aangepast werd.', verbose_name='laatst aangepast')),
                ('enabled', models.BooleanField(default=True, help_text='Ingeschakeld.', verbose_name='ingeschakeld')),
            ],
            options={
                'verbose_name': 'winkel',
                'verbose_name_plural': 'winkels',
            },
            bases=(models.Model, dirtyfields.dirtyfields.DirtyFieldsMixin),
        ),
        migrations.CreateModel(
            name='StoreCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Naam.', max_length=191, verbose_name='naam')),
            ],
            options={
                'verbose_name': 'winkelcategorie',
                'verbose_name_plural': 'winkelcategorieën',
            },
        ),
        migrations.CreateModel(
            name='StoreHeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.ImageField(help_text='De originele afbeelding die werd geüpload.', storage=private_media.storages.PrivateMediaStorage(), upload_to='storeheader', verbose_name='origineel')),
                ('store', models.OneToOneField(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, related_name='header', to='lunch.Store', verbose_name='winkel')),
            ],
            options={
                'verbose_name': 'headerafbeelding',
                'verbose_name_plural': 'headerafbeeldingen',
            },
        ),
        migrations.AddField(
            model_name='store',
            name='categories',
            field=models.ManyToManyField(help_text='Winkelcategorieën.', to='lunch.StoreCategory', verbose_name='winkelcategorieën'),
        ),
        migrations.AddField(
            model_name='store',
            name='hearts',
            field=models.ManyToManyField(blank=True, help_text='Hartjes van klanten.', through='customers.Heart', to=settings.AUTH_USER_MODEL, verbose_name='hartjes'),
        ),
        migrations.AddField(
            model_name='store',
            name='regions',
            field=models.ManyToManyField(blank=True, help_text="Regio's waaraan geleverd wordt.", to='lunch.Region', verbose_name="regio's"),
        ),
        migrations.AlterUniqueTogether(
            name='region',
            unique_together=set([('country', 'postcode')]),
        ),
        migrations.AddField(
            model_name='quantity',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AddField(
            model_name='openingperiod',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AddField(
            model_name='menu',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, related_name='menus', to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AddField(
            model_name='ingredientgroup',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='group',
            field=models.ForeignKey(help_text='Ingrediëntengroep.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='lunch.IngredientGroup', verbose_name='ingrediëntengroep'),
        ),
        migrations.AddField(
            model_name='holidayperiod',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AddField(
            model_name='food',
            name='foodtype',
            field=models.ForeignKey(help_text='Type etenswaar.', on_delete=django.db.models.deletion.CASCADE, to='lunch.FoodType', verbose_name='type etenswaar'),
        ),
        migrations.AddField(
            model_name='food',
            name='ingredientgroups',
            field=models.ManyToManyField(blank=True, help_text='Ingrediëntengroep.', to='lunch.IngredientGroup', verbose_name='ingrediëntengroep'),
        ),
        migrations.AddField(
            model_name='food',
            name='ingredients',
            field=models.ManyToManyField(blank=True, help_text='Ingrediënten.', through='lunch.IngredientRelation', to='lunch.Ingredient', verbose_name='ingrediënten'),
        ),
        migrations.AddField(
            model_name='food',
            name='menu',
            field=models.ForeignKey(help_text='Menu.', on_delete=django.db.models.deletion.CASCADE, related_name='food', to='lunch.Menu', verbose_name='menu'),
        ),
        migrations.AddField(
            model_name='deliveryperiod',
            name='store',
            field=models.ForeignKey(help_text='Winkel.', on_delete=django.db.models.deletion.CASCADE, to='lunch.Store', verbose_name='winkel'),
        ),
        migrations.AlterUniqueTogether(
            name='quantity',
            unique_together=set([('foodtype', 'store')]),
        ),
        migrations.AlterUniqueTogether(
            name='menu',
            unique_together=set([('name', 'store')]),
        ),
        migrations.AlterUniqueTogether(
            name='ingredientrelation',
            unique_together=set([('food', 'ingredient')]),
        ),
    ]
