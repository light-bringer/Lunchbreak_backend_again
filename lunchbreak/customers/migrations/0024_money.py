# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2017-03-09 19:37
from __future__ import unicode_literals

from decimal import Decimal

import Lunchbreak.fields
from django.db import migrations
import logging

logger = logging.getLogger()


def migration(apps, schema_editor, forward):
    Order = apps.get_model('customers', 'Order')
    OrderedFood = apps.get_model('customers', 'OrderedFood')
    Food = apps.get_model('lunch', 'Food')
    Ingredient = apps.get_model('lunch', 'Ingredient')
    IngredientGroup = apps.get_model('lunch', 'IngredientGroup')

    fields = {
        Order: {
            'total': 'total_new',
            'total_confirmed': 'total_confirmed_new',
        },
        OrderedFood: {
            'total': 'total_new',
            'cost': 'cost_new',
        },
        Food: {
            'cost': 'cost_new',
        },
        Ingredient: {
            'cost': 'cost_new',
        },
        IngredientGroup: {
            'cost': 'cost_new',
        }
    }

    for model, changed_fields in fields.items():
        objects = getattr(model, 'all_objects', model.objects)
        for instance in objects.all():
            logger.info('instance', instance)
            for old_field, new_field in changed_fields.items():
                field = model._meta.get_field(old_field)
                if forward:
                    old_value = getattr(instance, old_field)
                    if not old_value:
                        continue
                    new_value = int(old_value * (10 ** field.decimal_places))
                    logger.info('\told_field', old_field)
                    logger.info('\told_value', old_value)
                    logger.info('\tnew_value', new_value)
                    logger.info('')
                    setattr(instance, new_field, new_value)
                else:
                    new_value = getattr(instance, new_field)
                    if not new_value:
                        continue
                    old_value = Decimal(new_value) / Decimal(10 ** field.decimal_places)
                    logger.info('\told_field', old_field)
                    logger.info('\tnew_value', new_value)
                    logger.info('\told_value', old_value)
                    logger.info('')
                    setattr(instance, old_field, old_value)
                instance.save()


def migration_forward(apps, schema_editor):
    return migration(apps, schema_editor, forward=True)


def migration_reverse(apps, schema_editor):
    return migration(apps, schema_editor, forward=False)


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0023_order_placed_default'),
        ('lunch', '0022_money'),
    ]

    operations = [
        migrations.AddField(
            model_name='order',
            name='total_confirmed_new',
            field=Lunchbreak.fields.MoneyField(
                blank=True, default=None, help_text='Totale prijs na correctie van de winkel indien een afgewogen hoeveelheid licht afwijkt van de bestelde hoeveelheid. Dit is al inclusief het kortingspercentage.', null=True, verbose_name='totale gecorrigeerde prijs'),
        ),
        migrations.AddField(
            model_name='order',
            name='total_new',
            field=Lunchbreak.fields.MoneyField(
                default=0, help_text='Totale prijs inclusief korting.', verbose_name='totale prijs'),
        ),
        migrations.AddField(
            model_name='orderedfood',
            name='cost_new',
            field=Lunchbreak.fields.CostField(
                default=0, help_text='Kostprijs.', verbose_name='kostprijs'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='orderedfood',
            name='total_new',
            field=Lunchbreak.fields.MoneyField(
                default=0, help_text='Totale prijs exclusief korting.', verbose_name='totale prijs'),
        ),
        migrations.RunPython(migration_forward, migration_reverse),
    ]
